jobs:

- job: 'amd64_linux_clang'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: sudo apt-get -y -qq update
    displayName: 'apt-get update'
  - script: sudo apt install -y make clang
    displayName: 'Install requirements'
  - script: clang --version
    displayName: 'Verify tools version'
  - script: CC=clang make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: ./hello
    displayName: 'Run'

- job: 'amd64_linux_gcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: sudo apt-get -y -qq update
    displayName: 'apt-get update'
  - script: sudo apt install -y make gcc
    displayName: 'Install requirements'
  - script: gcc --version
    displayName: 'Verify tools version'
  - script: CC=gcc make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: ./hello
    displayName: 'Run'

- job: 'amd64_linux_tcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: sudo apt-get -y -qq update
    displayName: 'apt-get update'
  - script: sudo apt install -y make tcc
    displayName: 'Install requirements'
  - script: tcc -v
    displayName: 'Verify tools version'
  - script: CC=tcc make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: ./hello
    displayName: 'Run'

- job: 'amd64_macos_clang'
  pool:
    vmImage: 'macos-latest'
  steps:
  - script: cc --version
    displayName: 'Verify tools version'
  - script: make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: ./hello
    displayName: 'Run'

- job: 'amd64_macos_gcc'
  pool:
    vmImage: 'macos-latest'
  steps:
  - script: brew install gcc@9
    displayName: 'Install requirements'
  - script: gcc-9 --version
    displayName: 'Verify tools version'
  - script: CC=gcc-9 make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: ./hello
    displayName: 'Run'

- job: 'amd64_windows_clang'
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    PACMAN_PACKAGES: C:\tools\msys64\var\cache\pacman\pkg
    CC: clang
  steps:
  - script: choco install --no-progress msys2
    displayName: 'Install MSYS2'
  - task: Cache@2
    inputs:
      key: pacman
      restoreKeys: pacman
      path: $(PACMAN_PACKAGES)
    displayName: Cache pacman packages
  - script: pacman --version && pacman -Sy && pacman --noconfirm -S pacman-mirrors
    workingDirectory:  C:\tools\msys64\usr\bin\
    displayName: 'Check pacman'
  - script:  pacman --noconfirm -S msys/make mingw64/mingw-w64-x86_64-clang
    workingDirectory: C:\tools\msys64\usr\bin\
    displayName: 'Install requirements'
  - script: |
      set PATH=C:\tools\msys64\usr\bin;C:\tools\msys64\mingw64\bin;%PATH%
      clang --version
    displayName: 'Verify tools version'
  - script: |
      set PATH=C:\tools\msys64\usr\bin;C:\tools\msys64\mingw64\bin;%PATH%
      make
    displayName: 'make'
  - script: file hello.exe
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'amd64_windows_gcc'
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    PACMAN_PACKAGES: C:\tools\msys64\var\cache\pacman\pkg
    CC: gcc
  steps:
  - script: choco install --no-progress msys2
    displayName: 'Install MSYS2'
  - task: Cache@2
    inputs:
      key: pacman
      restoreKeys: pacman
      path: $(PACMAN_PACKAGES)
    displayName: Cache pacman packages
  - script: pacman --version && pacman -Sy && pacman --noconfirm -S pacman-mirrors
    workingDirectory:  C:\tools\msys64\usr\bin\
    displayName: 'Check pacman'
  - script:  pacman --noconfirm -S msys/make mingw64/mingw-w64-x86_64-gcc
    workingDirectory: C:\tools\msys64\usr\bin\
    displayName: 'Install requirements'
  - script: |
      set PATH=C:\tools\msys64\usr\bin;C:\tools\msys64\mingw64\bin;%PATH%
      gcc --version
    displayName: 'Verify tools version'
  - script: |
      set PATH=C:\tools\msys64\usr\bin;C:\tools\msys64\mingw64\bin;%PATH%
      make
    displayName: 'make'
  - script: file hello.exe
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'amd64_windows_mingw'
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    CC: 'gcc'
  steps:
  - script: choco install mingw --version 8.1.0
    displayName: 'install MinGW-w64'
  - script: gcc --version
    displayName: 'Verify tools version'
  - script: make
    displayName: 'make'
  - script: file hello.exe
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'amd64_windows_mingw_static'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      git clone --depth 1 https://github.com/dockcross/dockcross.git && cd dockcross
      docker run --rm dockcross/windows-static-x64 > ./dockcross-windows-static-x64
      chmod +x ./dockcross-windows-static-x64
    displayName: 'Prepare Dockcross'
  - script: ./dockcross/dockcross-windows-static-x64 bash -c '$CC --version'
    displayName: 'Verify tools version'
  - script: ./dockcross/dockcross-windows-static-x64 make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: docker run -v $PWD:/app tianon/wine:64 bash -c "wine64 wineboot >/dev/null &>/dev/null && wine64 /app/hello"
    displayName: 'Run'

- job: 'amd64_windows_tcc'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      choco install checksum unzip
      curl -L -o tcc.zip https://github.com/spartrekus/tcc-compiler-win/raw/master/tcc-0.9.27-win32-bin.zip
      checksum -c=5A3979BD5044B795547A4948A5625A12 tcc.zip && unzip tcc.zip
    displayName: 'Install requirements'
  - script: tcc\x86_64-win32-tcc.exe -v
    displayName: 'Verify tools version'
  - script: mingw32-make CC="tcc\x86_64-win32-tcc.exe" && ren hello hello.exe
    displayName: 'make'
  - script: file hello.exe
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'amd64_windows_vs2017'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
      modifyEnvironment: true
    displayName: Setup environment for Visual Studio
  - script: cl.exe
    displayName: 'Verify tools version'
  - script: mingw32-make -f Makefile.win
    displayName: 'make'
  - script: file hello.exe
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'amd64_windows_vs2019'
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
      modifyEnvironment: true
    displayName: Setup environment for Visual Studio
  - script: cl.exe
    displayName: 'Verify tools version'
  - script: mingw32-make -f Makefile.win
    displayName: 'make'
  - script: file hello.exe
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'arm64_linux_gcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: sudo apt-get -y -qq update
    displayName: 'apt-get update'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      curl -O http://musl.cc/aarch64-linux-musl-cross.tgz
      tar xzf aarch64-linux-musl-cross.tgz
    displayName: 'Get the cross-compiler'
  - script: ./aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc --version
    displayName: 'Verify tools version'
  - script: CC=./aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc LDFLAGS=-static make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: qemu-aarch64 ./hello
    displayName: 'Run'

- job: 'armhf_linux_gcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: sudo apt-get -y -qq update
    displayName: 'apt-get update'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      curl -O http://musl.cc/armel-linux-musleabihf-cross.tgz
      tar xzf armel-linux-musleabihf-cross.tgz
    displayName: 'Get the cross-compiler'
  - script: ./armel-linux-musleabihf-cross/bin/armel-linux-musleabihf-gcc --version
    displayName: 'Verify tools version'
  - script: CC=./armel-linux-musleabihf-cross/bin/armel-linux-musleabihf-gcc LDFLAGS=-static make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: qemu-arm ./hello
    displayName: 'Run'

- job: 'i686_linux_clang'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: sudo apt-get -y -qq update
    displayName: 'apt-get update'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      git clone --depth 1 https://github.com/dockcross/dockcross.git && cd dockcross
      docker run --rm dockcross/linux-x86 > ./dockcross-linux-x86
      chmod +x ./dockcross-linux-x86
    displayName: 'Prepare Dockcross'
  - script: ./dockcross/dockcross-linux-x86 bash -c "sudo apt install -y clang && clang -v"
    displayName: 'Check tools versions'
  - script: ./dockcross/dockcross-linux-x86 bash -c "sudo apt install -y clang && make CC=clang CFLAGS='-m32' LDFLAGS='-m32 -static'"
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: qemu-i386 ./hello
    displayName: 'Run'

- job: 'i686_linux_gcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: sudo apt-get -y -qq update
    displayName: 'apt-get update'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      curl -O http://musl.cc/i686-linux-musl-cross.tgz
      tar xzf i686-linux-musl-cross.tgz
    displayName: 'Get the cross-compiler'
  - script: ./i686-linux-musl-cross/bin/i686-linux-musl-gcc --version
    displayName: 'Verify tools version'
  - script: CC=./i686-linux-musl-cross/bin/i686-linux-musl-gcc LDFLAGS=-static make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: qemu-i386 ./hello
    displayName: 'Run'

- job: 'i686_linux_tcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: sudo apt-get -y -qq update
    displayName: 'apt-get update'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      git clone --depth 1 https://github.com/dockcross/dockcross.git && cd dockcross
      docker run --rm dockcross/linux-x86 > ./dockcross-linux-x86
      chmod +x ./dockcross-linux-x86
    displayName: 'Prepare Dockcross'
  - script: |
      git clone https://github.com/TinyCC/tinycc.git
      pushd tinycc && git checkout release_0_9_27 && popd
      ./dockcross/dockcross-linux-x86 bash -c "cd tinycc && ./configure --prefix=/usr --cpu=i386 --triplet=i386-linux-gnu && make"
    displayName: 'Prepare tcc'
  - script: ./dockcross/dockcross-linux-x86 bash -c "./tinycc/tcc -v"
    displayName: 'Check tools versions'
  - script: ./dockcross/dockcross-linux-x86 bash -c "cd tinycc && sudo make install && cd .. && make CC=tcc"
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: ./dockcross/dockcross-linux-x86 ./hello
    displayName: 'Run'

- job: 'i686_windows_clang'
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    PACMAN_PACKAGES: C:\tools\msys64\var\cache\pacman\pkg
    CC: clang
  steps:
  - script: choco install --no-progress msys2
    displayName: 'Install MSYS2'
  - task: Cache@2
    inputs:
      key: pacman
      restoreKeys: pacman
      path: $(PACMAN_PACKAGES)
    displayName: Cache pacman packages
  - script: pacman --version && pacman -Sy && pacman --noconfirm -S pacman-mirrors
    workingDirectory:  C:\tools\msys64\usr\bin\
    displayName: 'Check pacman'
  - script:  pacman --noconfirm -S msys/make mingw32/mingw-w64-i686-clang
    workingDirectory: C:\tools\msys64\usr\bin\
    displayName: 'Install requirements'
  - script: |
      set PATH=C:\tools\msys64\usr\bin;C:\tools\msys64\mingw32\bin;%PATH%
      clang --version
    displayName: 'Verify tools version'
  - script: |
      set PATH=C:\tools\msys64\usr\bin;C:\tools\msys64\mingw32\bin;%PATH%
      make
    displayName: 'make'
  - script: file hello.exe
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'i686_windows_digitalmars'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      choco install checksum unzip 7zip
      curl -o dm857c.zip http://ftp.digitalmars.com/Digital_Mars_C++/Patch/dm857c.zip
      checksum -c=C55373A029F878663FA80D0C3CAB7D15 dm857c.zip && unzip dm857c.zip
    displayName: 'Install requirements'
  - script: mingw32-make CC="dm\bin\dmc" CFLAGS="-w- -v2 -A "
    displayName: 'make'
  - script: 7z l hello.exe | findstr "CPU"
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'i686_windows_gcc'
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    PACMAN_PACKAGES: C:\tools\msys64\var\cache\pacman\pkg
    CC: gcc
  steps:
  - script: choco install --no-progress msys2
    displayName: 'Install MSYS2'
  - task: Cache@2
    inputs:
      key: pacman
      restoreKeys: pacman
      path: $(PACMAN_PACKAGES)
    displayName: Cache pacman packages
  - script: pacman --version && pacman -Sy && pacman --noconfirm -S pacman-mirrors
    workingDirectory:  C:\tools\msys64\usr\bin\
    displayName: 'Check pacman'
  - script:  pacman --noconfirm -S msys/make mingw32/mingw-w64-i686-gcc
    workingDirectory: C:\tools\msys64\usr\bin\
    displayName: 'Install requirements'
  - script: |
      set PATH=C:\tools\msys64\usr\bin;C:\tools\msys64\mingw32\bin;%PATH%
      gcc --version
    displayName: 'Verify tools version'
  - script: |
      set PATH=C:\tools\msys64\usr\bin;C:\tools\msys64\mingw32\bin;%PATH%
      make
    displayName: 'make'
  - script: file hello.exe
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'i686_windows_mingw_static'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      git clone --depth 1 https://github.com/dockcross/dockcross.git && cd dockcross
      docker run --rm dockcross/windows-static-x86 > ./dockcross-windows-static-x86
      chmod +x ./dockcross-windows-static-x86
    displayName: 'Prepare Dockcross'
  - script: ./dockcross/dockcross-windows-static-x86 bash -c '$CC --version'
    displayName: 'Verify tools version'
  - script: ./dockcross/dockcross-windows-static-x86 make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: docker run -v $PWD:/app tianon/wine:32 bash -c "wine wineboot >/dev/null &>/dev/null && wine /app/hello"
    displayName: 'Run'

- job: 'i686_windows_tcc'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      choco install checksum unzip
      curl -L -o tcc.zip https://archive.org/download/tinyccompiler/tcc-0.9.27-win64-bin.zip
      checksum -c=D73CF66CEC8C761DE38C7A3D16C9EB0D tcc.zip && unzip tcc.zip
    displayName: 'Install requirements'
  - script: tcc\i386-win32-tcc.exe -v
    displayName: 'Verify tools version'
  - script: mingw32-make CC="tcc\i386-win32-tcc.exe" && ren hello hello.exe
    displayName: 'make'
  - script: file hello.exe
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'i686_windows_vs2017'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
      arguments: -no_logo
      modifyEnvironment: true
    displayName: Setup environment for Visual Studio
  - script: cl.exe
    displayName: 'Verify tools version'
  - script: mingw32-make -f Makefile.win
    displayName: 'make'
  - script: dumpbin /headers hello.exe | findstr "machine"
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'i686_windows_vs2019'
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
      arguments: -no_logo
      modifyEnvironment: true
    displayName: Setup environment for Visual Studio
  - script: cl.exe
    displayName: 'Verify tools version'
  - script: mingw32-make -f Makefile.win
    displayName: 'make'
  - script: dumpbin /headers hello.exe | findstr "machine"
    displayName: 'Verify executable'
  - script: hello.exe
    displayName: 'Run'

- job: 'mips_linux_gcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: sudo apt-get -y -qq update
    displayName: 'apt-get update'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      curl -O http://musl.cc/mips-linux-musl-cross.tgz
      tar xzf mips-linux-musl-cross.tgz
    displayName: 'Get the cross-compiler'
  - script: ./mips-linux-musl-cross/bin/mips-linux-musl-gcc --version
    displayName: 'Verify tools version'
  - script: CC=./mips-linux-musl-cross/bin/mips-linux-musl-gcc LDFLAGS=-static make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: qemu-mips ./hello
    displayName: 'Run'

- job: 'mips64_linux_gcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: sudo apt-get -y -qq update
    displayName: 'apt-get update'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      curl -O http://musl.cc/mips64-linux-musl-cross.tgz
      tar xzf mips64-linux-musl-cross.tgz
    displayName: 'Get the cross-compiler'
  - script: ./mips64-linux-musl-cross/bin/mips64-linux-musl-gcc --version
    displayName: 'Verify tools version'
  - script: CC=./mips64-linux-musl-cross/bin/mips64-linux-musl-gcc LDFLAGS=-static make
    displayName: 'make'
  - script: file ./hello
    displayName: 'Verify executable'
  - script: qemu-mips64 ./hello
    displayName: 'Run'
